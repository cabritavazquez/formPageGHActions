name: CI GitHub Actions

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Paso Build
        run: |
          echo "Hola Build"
          sleep 5

  sonar:
    name: Sonar
    runs-on: ubuntu-latest
    steps:
      - name: Paso Sonar
        run: |
          echo "Hola Sonar"
          sleep 5

  fortify:
    name: Fortify
    runs-on: ubuntu-latest
    steps:
      - name: Paso Fortify
        run: |
          echo "Hola Fortify"
          sleep 5

  nexus:
    name: Nexus
    runs-on: ubuntu-latest
    steps:
      - name: Paso Nexus
        run: |
          echo "Hola Nexus"
          sleep 5

  post:
    name: Post
    needs: [Nexus]
    runs-on: ubuntu-latest
    steps:
      - name: Paso Post
        run: |
          echo "Hola Post"
          sleep 5
      - name: Checkout c√≥digo
        uses: actions/checkout@v3
        with:
          repository: cabritavazquez/testLambdaCode
          ref: main
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Instalar jq
        run: sudo apt-get install -y jq
      - name: Reading conf.json
        run: |
          ls
          TEST=$(jq -r '.S3' conf.json)
          echo "TEST: $TEST"
      - name: Reading configuration.json
        run: |
          ls
          BUCKET_NAME=$(jq -r ".Environment.DEV.Buckets[0].bucket_name" configuration.json)
          echo "BUCKET_NAME: $BUCKET_NAME"
          PATH=$(jq -r ".Environment.DEV.Buckets[0].path" configuration.json)
          echo "PATH: $PATH"
        # ARTIFACT_NAME=$(jq -r ".Environment.DEV.Buckets[0].artifact_name" configuration.json)
        # echo "ARTIFACT_NAME: $ARTIFACT_NAME"
        # LAMBDA_NAME=$(jq -r ".Environment.DEV.Lambdas[0].lambda_name" configuration.json)
        # echo "LAMBDA_NAME: $LAMBDA_NAME"
        # HANDLER=$(jq -r ".Environment.DEV.Lambdas[0].handler" configuration.json)
        # echo "HANDLER: $HANDLER"
        # RUNTIME=$(jq -r ".Environment.DEV.Lambdas[0].Runtime" configuration.json)
        # echo "RUNTIME: $RUNTIME"
        # MEMORY_SIZE=$(jq -r ".Environment.DEV.Lambdas[0].MemorySize" configuration.json)
        # echo "MEMORY_SIZE: $MEMORY_SIZE"

      - name: Obtener archivos .py
        run: |
          FILES=$(ls *.py)
          echo "hola: $FILES"
          FILES_LIST=$(echo $FILES)
          echo "Archivos .py encontrados: $FILES_LIST"
